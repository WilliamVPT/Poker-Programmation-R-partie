/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import edu.info0502.poker.*;
import edu.info0502.tp3.*;
import java.util.ArrayList;
import java.util.List;

import javax.print.attribute.standard.Media;

public class App {
   public static void main(String[] args) {    
        // texas hold'em

        Paquet paquet = new Paquet();
        System.out.println(paquet.toString());

        Talon talon = new Talon(3);
        talon.melanger();

        Main[] Joueurs = new Main[4];
        for (int i = 0; i < 4; i++) {
            Joueurs[i] = new Main(talon, 2);
        }
        for (int i = 0; i < 2; i++) {
            Joueurs[0].distribuerCarte(i, talon);
            Joueurs[1].distribuerCarte(i, talon);
            Joueurs[2].distribuerCarte(i, talon);
            Joueurs[3].distribuerCarte(i, talon);
        }
        Main Croupier = new Main(talon, 5);
        Carte[] cartesCroupier = Croupier.getMain();
        List<Carte[]> CombiFortes = new ArrayList<>();

        // Pour chaque joueur
        for (int i = 0; i < 4; i++) {
            List<Carte[]> combinaisons = Joueurs[i].getAllCombinations(cartesCroupier);
            Carte[] meilleureCombinaison = combinaisons.get(0); // On part du principe que la première est la plus forte

            // Comparer chaque combinaison pour trouver la plus forte
            for (int j = 1; j < combinaisons.size(); j++) {
                Carte[] combinaisonActuelle = combinaisons.get(j);

                // Créer des objets `Main` temporaires pour utiliser `estPlusForte`
                Main mainTemp1 = new Main(meilleureCombinaison);
                Main mainTemp2 = new Main(combinaisonActuelle);

                // Si la combinaison actuelle est plus forte, on met à jour la meilleure
                // combinaison
                if (mainTemp2.estPlusForte(mainTemp1)) {
                    meilleureCombinaison = combinaisonActuelle;
                }
            }

            // Ajouter la combinaison la plus forte de ce joueur dans la liste CombiFortes
            CombiFortes.add(meilleureCombinaison);
        }

        // Affichage des meilleures combinaisons pour chaque joueur
        for (int i = 0; i < CombiFortes.size(); i++) {
            Main combinaison = new Main(CombiFortes.get(i));
            System.out.println("Combinaison forte du joueur " + (i + 1) + " : ");
            System.out.println(combinaison.toString());
            System.out.println();
        }

        int JV = 0;

        for (int i = 1; i < CombiFortes.size(); i++) {
            Main maintemp1 = new Main(CombiFortes.get(i));
            Main maintemp2 = new Main(CombiFortes.get(JV));
            
            if (maintemp1.estPlusForte(maintemp2)) {
                JV = i;
            }
        }
        
        Main JoueurGagnant = new Main(CombiFortes.get(JV));
        System.out.println("Victoire joueur : " + (JV + 1) + " avec : \n" + JoueurGagnant.toString());
        
        Serveur serveur = new Serveur();

    }
}
